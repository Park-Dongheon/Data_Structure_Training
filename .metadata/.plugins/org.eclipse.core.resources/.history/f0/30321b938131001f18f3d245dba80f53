package Chapter8_리스트;
/*
 * 정수 리스트 > 객체 리스트 >
 * * 헤드 노드가 있는 원형 리스트, 헤드 노드가 없는 원형 리스트 구현
 * merge 구현: in-place 구현, 새로운 노드를 생성하여 합병 구현 
 * 원형 이중 리스트로 동일하게 적용
 */
import java.util.Comparator;
import java.util.Scanner;

class SimpleObject2 {
	// 데이터 입력 옵션: 번호, 이름, 유효기간을 입력할 때 사용할 비트 마스크 상수
	static final int NO = 1; 		// 번호를 읽어 들일까요?
	static final int NAME = 2;		// 이름을 읽어 들일까요?
	static final int EXPIRE = 4;	// 유효기간을 읽어 들일까요?
	
	String no; 		// 회원번호
	String name;	// 이름
	String expire;	//  유효기간 필드를 추가

	// 생성자: 회원번호, 이름, 유효기간을 받아 초기화
	public SimpleObject2(String sno, String sname, String sexpire) {
		this.no = sno;
		this.name = sname;
		this.expire = sexpire;
	}
	
	// 기본 생성자: 초기화 x
	public SimpleObject2() {
		this.no = null;
		this.name = null;
		this.expire = null;
	}
	
	// --- 문자열 표현을 반환 ---//
	@Override
	public String toString() {
		return "[" + no + "] " + name + ", 유효기간: " + expire;
	}
	
	// --- 데이터를 읽어 들임 ---//
	void scanData(String guide, int sw) {
		Scanner sc = new Scanner(System.in);
		System.out.println(guide + "할 데이터를 입력하세요."+ sw);

		// 번호를 입력할 경우
		if ((sw & NO) == NO) { //& 는 bit 연산자임
			System.out.print("번호: ");
			no = sc.next();
		}
		
		// 이름을 입력할 경우
		if ((sw & NAME) == NAME) {
			System.out.print("이름: ");
			name = sc.next();
		}
		
		// 유효기간을 입력할 경우
        if ((sw & EXPIRE) == EXPIRE) {
            System.out.print("유효기간: ");
            expire = sc.next();
        }
	}
	
	// --- 회원번호로 순서를 매기는 comparator ---//
	public static final Comparator<SimpleObject2> NO_ORDER = new NoOrderComparator();

	private static class NoOrderComparator implements Comparator<SimpleObject2> {
		@Override
		public int compare(SimpleObject2 d1, SimpleObject2 d2) {
			// 문자열 회원번호를 정수로 변환
			int num1 = Integer.parseInt(d1.no);
			int num2 = Integer.parseInt(d2.no);
			// 회원번호 비교하여 결과 반환
			return (num1 > num2) ? 1 : (num1 < num2) ? -1 : 0;
		//  return Integer.compare(num1, num2);	
		}
	}

	// --- 이름으로 순서를 매기는 comparator ---//
	public static final Comparator<SimpleObject2> NAME_ORDER = new NameOrderComparator();

	private static class NameOrderComparator implements Comparator<SimpleObject2> {
		@Override
		public int compare(SimpleObject2 d1, SimpleObject2 d2) {
			// 이름 비교하여 결과 반환
			return (d1.name.compareTo(d2.name) > 0) ? 1 : ((d1.name.compareTo(d2.name) < 0)) ? -1 : 0;
		}
	}
	
	// --- 유효기간으로 순서를 매기는 comparator ---//
	public static final Comparator<SimpleObject2> NO_EXPIRE = new NoOrderComparator();

	private static class ExpireOrderComparator implements Comparator<SimpleObject2> {
		@Override
		public int compare(SimpleObject2 d1, SimpleObject2 d2) {
			// 문자열 유효기간을 정수로 변환
			int num1 = Integer.parseInt(d1.expire);
			int num2 = Integer.parseInt(d2.expire);
			// 유효기간 비교하여 결과 반환
			return (num1 > num2) ? 1 : (num1 < num2) ? -1 : 0;
		//  return Integer.compare(num1, num2);	
		}
	}
}

class Node4 {
	SimpleObject2 data; 		// 데이터
	Node4 llink; 				// 좌측포인터(앞쪽 노드에 대한 참조)
	Node4 rlink; 				// 우측포인터(뒤쪽 노드에 대한 참조)

	// --- 생성자(constructor) ---//
	
	// 데이터를 받아 초기화하는 생성자
	Node4(SimpleObject2 so) {
		this.data = so;			// 주어진 데이터로 초기화 
		llink = rlink = this;	// 좌측과 우측 포인터를 자신을 가리키도록 초기화
	}
	
	// 기본 생성자
	Node4() { 					// head node로 사용
		this.data = null;		// 데이터 없음
		llink = rlink = this;	// 좌측과 우측 포인터를 자신을 가리키도록 초기화
	}
	
	// 데이터를 직접 받아 생성하는 생성자
	Node4(String sno, String sname, String sexpire) {
		data = new SimpleObject2(sno, sname, sexpire);	// SimpleObject2 객체를 생성하여 데이터로 초기화
		llink = rlink = this;	// 좌측과 우측 포인터를 자신을 가리키도록 초기화
	}
	
	// 다른 Node4 객체와 비교하여 순서를 정하는 메서드
	public int compareNode(Node4 n2) {
		SimpleObject2 so1 = this.data;			// 현재 노드의 데이터
		if (SimpleObject2.NO_ORDER.compare(so1, n2.data) < 0) return -1;		// 현재 데이터가 n2보다 작으면 -1 반환
		else if (SimpleObject2.NO_ORDER.compare(so1, n2.data) > 0) return 1;	// 현재 데이터가 n2보다 크면 1 반환
		else return 0;		// 같으면 0 반환
	}
	
}

class DoubledLinkedList2 {
	private Node4 first; // 머리 포인터(참조하는 곳은 더미노드)

	// --- 생성자(constructor) ---//
	public DoubledLinkedList2() {
		first = new Node4(); // dummy(first) 노드를 생성

	}

	// --- 리스트가 비어있는가? ---//
	public boolean isEmpty() {
		// 첫 번째 더미 노드의 오른쪽 링크가 자기 자신을 가리키면 리스트는 비어 있음
		return first.rlink == first;
	}

	// --- 노드를 검색 ---//
	public boolean search(SimpleObject2 obj, Comparator<? super SimpleObject2> c) {
		// 첫 번째 더미 노드의 다음 노드부터 탐색 시작
		Node4 ptr = first.rlink; // 현재 스캔 중인 노드
		
        while (ptr != first) {					// 첫 번째 더미 노드에 도달할 때까지 반복
            if (c.compare(obj, ptr.data) == 0) {// 데이터 비교
                return true; 					// 데이터가 발견되면 true 반환
            }
            ptr = ptr.rlink; 					// 다음 노드로 이동
        }
        return false; 							// 데이터를 찾지 못하면 false 반환

	}

	// --- 전체 노드 표시 ---//
	public void show() {
		Node4 ptr = first.rlink; 			// 더미 노드의 뒤쪽 노드
		
        while (ptr != first) {				// 첫 번째 더미 노드에 도달할 때까지 반복
            System.out.print(ptr.data);		// 노드의 데이터 출력
            ptr = ptr.rlink; 				// 다음 노드로 이동
        }
        
        System.out.println();
	}

	// --- 올림차순으로 정렬이 되도록 insert ---//
	public void add(SimpleObject2 obj, Comparator<? super SimpleObject2> c) {
		Node4 temp = new Node4(obj);
		Node4 ptr = first;

        while (ptr.rlink != first && c.compare(obj, ptr.rlink.data) > 0) {
            ptr = ptr.rlink;
        }

        temp.rlink = ptr.rlink;
        temp.llink = ptr;
        ptr.rlink.llink = temp;
        ptr.rlink = temp;

	}

	// --- list에 삭제할 데이터가 있으면 해당 노드를 삭제 ---//
	public void delete(SimpleObject2 obj, Comparator<? super SimpleObject2> c) {
        Node4 ptr = first.rlink;

        while (ptr != first) {
            if (c.compare(obj, ptr.data) == 0) {
                ptr.llink.rlink = ptr.rlink;
                ptr.rlink.llink = ptr.llink;
                return;
            }
            ptr = ptr.rlink;
        }
        
	}
	
	public DoubledLinkedList2 merge(DoubledLinkedList2 lst2) {
		//l3 = l1.merge(l2); 실행하도록 리턴 값이 리스트임 
		//l.add(객체)를 사용하여 구현
		//기존 리스트의 노드를 변경하지 않고 새로운 리스트의 노드들을 생성하여 구현 
		DoubledLinkedList2 lst3 = new DoubledLinkedList2();
		Node4 ai = this.first.rlink, bi = lst2.first.rlink;

        while (ai != this.first && bi != lst2.first) {
            if (SimpleObject2.NO_ORDER.compare(ai.data, bi.data) <= 0) {
                lst3.add(ai.data, SimpleObject2.NO_ORDER);
                ai = ai.rlink;
            } else {
                lst3.add(bi.data, SimpleObject2.NO_ORDER);
                bi = bi.rlink;
            }
        }

        while (ai != this.first) {
            lst3.add(ai.data, SimpleObject2.NO_ORDER);
            ai = ai.rlink;
        }

        while (bi != lst2.first) {
            lst3.add(bi.data, SimpleObject2.NO_ORDER);
            bi = bi.rlink;
        }
		
		return lst3;

	}
}

public class 과제_실습9_6객체이중리스트 {
	enum Menu {
		Add("삽입"), Delete("삭제"), Show("인쇄"), Search("검색"), Merge("병합"), Exit("종료");

		private final String message; // 표시할 문자열

		static Menu MenuAt(int idx) { // 순서가 idx번째인 열거를 반환
			for (Menu m : Menu.values())
				if (m.ordinal() == idx)
					return m;
			return null;
		}

		Menu(String string) { // 생성자(constructor)
			message = string;
		}

		String getMessage() { // 표시할 문자열을 반환
			return message;
		}
	}

	// --- 메뉴 선택 ---//
	static Menu SelectMenu() {
		Scanner sc1 = new Scanner(System.in);
		int key;
		do {
			for (Menu m : Menu.values()) {
				System.out.printf("(%d) %s  ", m.ordinal(), m.getMessage());
				if ((m.ordinal() % 3) == 2 && m.ordinal() != Menu.Exit.ordinal())
					System.out.println();
			}
			System.out.print(" : ");
			key = sc1.nextInt();
		} while (key < Menu.Add.ordinal() || key > Menu.Exit.ordinal());
		return Menu.MenuAt(key);
	}

	public static void main(String[] args) {
		Menu menu; // 메뉴
		Scanner sc2 = new Scanner(System.in);
		DoubledLinkedList2 lst1 = new DoubledLinkedList2(), lst2 = new DoubledLinkedList2(),lst3 = new DoubledLinkedList2();
		String sno1 = null, sname1 = null, sexpire1 = null;
		SimpleObject2 so;
		boolean result = false;
		int count = 3;
		do {
			switch (menu = SelectMenu()) {
			case Add: // 객체들의 올림차순으로 정렬되도록 구현
				so =  new SimpleObject2();
				so.scanData("입력", 3);
				lst1.add(so, SimpleObject2.NO_ORDER);
				break;
			case Delete: // 임의 객체를 삭제
				so =  new SimpleObject2();
				so.scanData("삭제", SimpleObject2.NO);
				lst1.delete(so, SimpleObject2.NO_ORDER);
				break;
			case Show: // 리스트 전체를 출력
				lst1.show();
				break;
			case Search: // 회원 번호 검색
				so =  new SimpleObject2();
				so.scanData("탐색", SimpleObject2.NO);
				result = lst1.search(so, SimpleObject2.NO_ORDER);
				if (!result)
					System.out.println("검색 값 = " + so + "데이터가 없습니다.");
				else
					System.out.println("검색 값 = " + so + "데이터가 존재합니다.");
				break;
			case Merge://기존 2개의 리스트를 합병하여 새로운 리스트를 생성(새로운 노드를 생성하여 추가)
				System.out.println("두 번째 리스트에 삽입할 데이터를 입력하세요.");
				for (int i = 0; i < count; i++) {
					so =  new SimpleObject2();
					so.scanData("입력", 3);
					lst2.add(so, SimpleObject2.NO_ORDER);
				}
				lst3 = lst1.merge(lst2);
				System.out.println("list1: ");
				lst1.show();
				System.out.println("list2: ");
				lst2.show();
				System.out.println("list3: ");
				lst3.show();
				break;
			case Exit: // 
				break;
			}
		} while (menu != Menu.Exit);
		sc2.close();
	}
}
