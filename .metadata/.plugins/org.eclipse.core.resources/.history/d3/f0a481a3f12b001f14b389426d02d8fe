package Chapter6_정렬알고리즘;

class Polynomial implements Comparable<Polynomial>{
	double coef;           // 계수
    int    exp;            // 지수

    public Polynomial(double coef, int exp) {
    	this.coef = coef;
    	this.exp = exp;
    }

	@Override
	public int compareTo(Polynomial p) {
		// 지수를 기준으로 비교
		return Integer.compare(this.exp, p.exp);
	}

	@Override
	public String toString() {
		return "Polynomial [coef=" + coef + ", exp=" + exp + "]";
	}

}
public class 과제10_다항식merge연산 {

	static void merge(Polynomial[] a, int lefta, int righta, int leftb, int rightb ) {
		int size = rightb - lefta + 1;
		
		Polynomial[] temp = new Polynomial[size];
		
		int i = lefta, j = leftb, k = 0;
		
		while (i <= righta && j <= rightb) {
			if (a[i].compareTo(a[j]) <= 0) {
				temp[k++] = a[i++];
			} else {
				temp[k++] = a[j++];
			}
		}
		
		while (i <= righta) 
			temp[k++] = a[i++];
		
		while (j <= rightb)
			temp[k++] = a[j++];
		
		for (i = 0; i < size; i++)
			a[lefta + i] = temp[i];
		
	}

	// --- 퀵 정렬(비재귀 버전)---//
	static void MergeSort(Polynomial[] a, int left, int right) {
		int mid = (left+right)/2;
		if (left == right) return;
		
		MergeSort(a, left, mid);
		MergeSort(a, mid+1, right);
		
		merge(a, left, mid, mid+1, right);
	}

	public static void main(String[] args) {
		Polynomial[] x = {
		         new Polynomial(1.5, 3),
		         new Polynomial(2.5, 7),
		         new Polynomial(3.3, 2),
		         new Polynomial(4.0, 1),
		         new Polynomial(2.2, 0),
		         new Polynomial(3.1, 4),
		         new Polynomial(3.8, 5),
		     };
		Polynomial[] y = {
		         new Polynomial(1.5, 1),
		         new Polynomial(2.5, 2),
		         new Polynomial(3.3, 3),
		         new Polynomial(4.0, 0),
		         new Polynomial(2.2, 4),
		         new Polynomial(3.1, 5),
		         new Polynomial(3.8, 6),
		     };
		int nx = x.length;

		ShowPolynomial(x);
		ShowPolynomial(y);
		MergeSort(x, 0, x.length - 1); // 배열 x를 퀵정렬
		MergeSort(y, 0, y.length - 1); // 배열 x를 퀵정렬
		ShowPolynomial(x);
		ShowPolynomial(y);
		Polynomial[] z = new Polynomial[20];
		AddPolynomial(x,y,z);//다항식 덧셈 z = x + y
		ShowPolynomial(z);
//		ShowPolynomial(y);
		MultiplyPolynomial(x,y,z);//다항식 곱셈 z = x * y
		ShowPolynomial(z);
		ShowPolynomial(y);
		int result = EvaluatePolynomial(z, 10);//다항식 값 계산 함수 z(10) 값 계산한다 
		System.out.println(" result = " + result );
	}

	static void ShowPolynomial(Polynomial[] x) {
		for (Polynomial p : x)
			if (p != null)
				System.out.print(p + " ");
		System.out.println();
	}

	static void AddPolynomial(Polynomial[] x, Polynomial[] y, Polynomial[] z) {
		int i = 0, j = 0, k = 0;
		while (i < x.length && j < y.length) {
			if (x[i] == null && y[j] == null) break;
			if (x[i] == null || (y[j] != null && y[j].exp < x[i].exp)) {
				z[k++] = y[j++];
			} else if (y[j] == null || x[i].exp < y[j].exp) {
				z[k++] = x[i++];
			} else {
				z[k] = new Polynomial(x[i].coef + y[j].coef, x[i].exp);
				i++;
				j++;
				k++;
			}
		}
		while (i < x.length && x[i] != null) z[k++] = x[i++];
		while (j < y.length && y[j] != null) z[k++] = y[j++];
	}
	
	static void MultiplyPolynomial(Polynomial[] x, Polynomial[] y, Polynomial[] z) {
		for (int i = 0; i < x.length; i++) {
			for (int j = 0; j < y.length; j++) {
				if (x[i] == null || y[j] == null) continue;
				int exp = x[i].exp + y[j].exp;
				double coef = x[i].coef * y[j].coef;
				boolean found = false;
				for (int k = 0; k < z.length; k++) {
					if (z[k] != null && z[k].exp == exp) {
						z[k].coef += coef;
						found = true;
						break;
					}
				}
				if (!found) {
					for (int k = 0; k < z.length; k++) {
						if (z[k] == null) {
							z[k] = new Polynomial(coef, exp);
							break;
						}
					}
				}
			}
		}
	}

	static int EvaluatePolynomial(Polynomial[] z, int x) {
		int result = 0;
		for (Polynomial p : z) {
			if (p != null) {
				result += p.coef * Math.pow(x, p.exp);
			}
		}
		return result;
	}
	
}
