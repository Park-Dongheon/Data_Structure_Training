package Chapter10_해시;

import java.util.Scanner;
//체인법에 의한 해시
//--- 해시를 구성하는 노드 ---//

class Node {	
	int key; 							// 키값
	Node next; 							// 뒤쪽 포인터(뒤쪽 노드에 대한 참조)
	
	// 생성자
	public Node(int key, Node next) {
		this.key = key;
		this.next = next;
	}

	// 키 값 반환
	public int getKey() {
		return key;
	}


	// key 값을 기반으로 해시 코드를 생성
	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return Integer.hashCode(key);
	}

	// 노드의 key 값이 같은지 비교
	@Override
	public boolean equals(Object o) {
		// TODO Auto-generated method stub
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;
		
		Node node = (Node) o;
		
		return key == node.key;
	}
	
}

class SimpleChainHash {
	private int size; 						// 해시 테이블의 크기
	private Node[] table; 					// 해시 테이블

	public SimpleChainHash(int size) {
		try {
			this.size = size;
			table = new Node[size];
		} catch (OutOfMemoryError e) {		// 테이블을 생성할 수 없음
			this.size = 0;
		}
	}
	
	public int hashValue(int key) {
//		return key.hashCode() % size;
		return (key * key * 31) % size;		// 31은 소수이자 홀수, 비트 연산 최적화가 가능
	}


	// --- 키값이 key인 요소를 검색(데이터를 반환) ---//
	public int search(int key) {
		int hash = hashValue(key);				// 검색할 데이터의 해시값
		Node selectN = table[hash];				// 선택 노드
		
		while (selectN != null) {				// 선택 노드가 null 일 때까지 반복
			if (selectN.getKey() == key) {		// 선택 노드의 key 값과 검색할 key 값이 일치할 경우
				return 1;						// 검색 성공
			}
			selectN = selectN.next;				// 다음 노드를 선택
		}
		
		return 0;								// 검색 실패 
	}

	// --- 키값이 key인 데이터를 data의 요소로 추가 ---//
	public int add(int key) {
	 int hash = hashValue(key);					// 추가할 데이터의 해시값
	 Node selectN = table[hash];					// 선택 노드
	 
	 // 선택 노드의 해시 값이 중복 -> 충돌이 난 경우
	 while (selectN != null) {					// 선택 노드가 null 일 때까지 반복
		 if (selectN.key == key) {			// 선택 노드의 key 값과 추가할 데이터의 키 값이 같은지 비교
			 return hash;
		 }
		 selectN = selectN.next;
	 }
	 
	 // 충돌이 발생할 경우 연결 리스트(체이닝)를 사용하여 새로운 노드를 추가
	 Node newNode = new Node(key, selectN);		// 추가할 새 노드 생성
	 if (table[hash] != null) {
		 table[hash].next = newNode;
	 }
	 table[hash] = newNode;						// 새 노드 삽입
	 return table[hash].key;
	}

	// --- 키값이 key인 요소를 삭제 ---//
	public int delete(int key) {
		return key;

	}

	// --- 해시 테이블을 덤프(dump) ---//
	public void dump() {

	}
}

public class 실습10_1정수체인해시 {

	enum Menu {
		Add("삽입"), Delete("삭제"), Search("검색"), Show("출력"), Exit("종료");

		private final String message; // 표시할 문자열

		static Menu MenuAt(int idx) { // 순서가 idx번째인 열거를 반환
			for (Menu m : Menu.values())
				if (m.ordinal() == idx)
					return m;
			return null;
		}

		Menu(String string) { // 생성자(constructor)
			message = string;
		}

		String getMessage() { // 표시할 문자열을 반환
			return message;
		}
	}

	// --- 메뉴 선택 ---//
	static Menu SelectMenu() {
		Scanner sc = new Scanner(System.in);
		int key;
		
		do {
			for (Menu m : Menu.values()) {
				System.out.printf("(%d) %s  ", m.ordinal(), m.getMessage());
				if ((m.ordinal() % 3) == 2 && m.ordinal() != Menu.Exit.ordinal())
					System.out.println();
			}
			System.out.print(" : ");
			key = sc.nextInt();
		} while (key < Menu.Add.ordinal() || key > Menu.Exit.ordinal());
		
		return Menu.MenuAt(key);
	}

	//체인법에 의한 해시 사용 예
	public static void main(String[] args) {
		Menu menu;
		SimpleChainHash hash = new SimpleChainHash(11);
		Scanner stdIn = new Scanner(System.in);
		int select = 0, result = 0, val = 0;
		final int count = 15;
		do {
			switch (menu = SelectMenu()) {
			case Add:
				int[] input = new int[count];
				for (int ix = 0; ix < count; ix++) {
					double d = Math.random();
					input[ix] = (int) (d * 20);
					System.out.print(input[ix] + " ");
				}
				System.out.println();
				for (int i = 0; i < count; i++) {
					if ((hash.add(input[i])) == 0)
						System.out.println("Insert Duplicated data : " + input[i]);
				}
				break;
				
			case Delete:
				// Delete
				System.out.println("Search Value:: ");
				val = stdIn.nextInt();
				result = hash.delete(val);
				if (result == 1)
					System.out.println(" 검색 데이터가 존재한다");
				else
					System.out.println(" 검색 데이터가 없음");
				System.out.println();
				break;
				
			case Search:
				System.out.println("Search Value:: ");
				val = stdIn.nextInt();
				result = hash.search(val);
				if (result == 1)
					System.out.println(" 검색 데이터가 존재한다");
				else
					System.out.println(" 검색 데이터가 없음");
				System.out.println();
				break;

			case Show:
				hash.dump();
				break;
			}
		} while (menu != Menu.Exit);

		stdIn.close();
	}
}
