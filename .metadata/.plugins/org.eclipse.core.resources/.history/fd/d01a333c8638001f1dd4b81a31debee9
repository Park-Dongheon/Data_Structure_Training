package Chapter10_해시;

import java.util.Comparator;
import java.util.Scanner;

//오픈 주소법에 의한 해시

class SimpleObject2 {
	static final int NO = 1;				// 회원번호 입력 플래그
	static final int NAME = 2;				// 이름 입력 플래그
	
	String sno; 							// 회원번호(키 값)
	String sname; 							// 이름
	
	//--- 기본 생성자 ---//
	public SimpleObject2() {
		this.sno = null;
		this.sname = null;
	}

	//--- 생성자 초기화 ---//
	public SimpleObject2(String sno, String sname) {
		this.sno = sno;
		this.sname = sname;
	}

	//--- 문자열 표현을 반환 ---//
	@Override
	public String toString() {
		return "(회원번호: " + sno + ", 이름: " + sname + ")";
	}

	//--- 데이터 입력 ---//
	public void scanData(String guide, int sw) {
		Scanner sc = new Scanner(System.in);
		System.out.println(guide + "할 데이터를 입력하세요." + sw);
		
		if ((sw & NO) == NO) {
			System.out.print("회원번호: ");
			sno = sc.next();
		}
		if ((sw & NAME) == NAME) {
			System.out.print("이름: ");
			sname = sc.next();
		}
	}
	
	//--- 회원 번호로 순서를 매기는 comparator ---//
	public static final Comparator<? super SimpleObject2> NO_ORDER = new NoOrderComparator();

	public static class NoOrderComparator implements Comparator<SimpleObject2> {
		@Override
		public int compare(SimpleObject2 o1, SimpleObject2 o2) {
			int num1 = Integer.parseInt(o1.sno);
			int num2 = Integer.parseInt(o2.sno);
			return (num1 > num2) ? 1 : (num1 < num2) ? -1 : 0;
		}		
	}
	
	//--- 이름으로 순서를 매기는 comparator ---//
	public static final Comparator<? super SimpleObject2> NAME_ORDER = new NameOrderComparator();
	
	public static class NameOrderComparator implements Comparator<SimpleObject2> {

		@Override
		public int compare(SimpleObject2 o1, SimpleObject2 o2) {
			return o1.sname.compareTo(o2.sname);
		}
		
	}
}

class OpenHash {

	// --- 버킷의 상태 ---//
	enum Status {
		OCCUPIED, EMPTY, DELETED
	}; // {데이터 저장, 비어있음, 삭제 완료}

	// --- 버킷 ---//
	static class Bucket {
		private SimpleObject2 data; 				// 데이터(키 값)
		private Status stat;						// 상태
		
		//--- 버킷 생성자 ---//
		public Bucket() {
			stat = Status.EMPTY;					// 초기 버킷 상태를 초기화, 버킷이 비어있음
		}
		
		//--- 모든 필드에 값을 설정 ---//
		void set(SimpleObject2 data, Status stat) {
			this.data = data;						// 키 값
			this.stat = stat;						// 상태
		}

		//--- 상태를 설정 ---//
		public void setStat(Status stat) {
			this.stat = stat;
		}
		
		//--- 키값을 반환 ---//
		public SimpleObject2 getData() {
			return data;
		}

		@Override
		public String toString() {
			return "(data: " + data + ", stat: " + stat + ")";
		}

	}

	private int size; 								// 해시 테이블의 크기
	private Bucket[] table; 						// 해시 테이블

	// --- 생성자(constructor) ---//
	public OpenHash(int size) {
		try {
			table = new Bucket[size];				// size 크기의 해시 테이블 생성
			for (int i = 0; i < size; i++)			// 해시 테이블의 요소를 순회하며 버킷 생성
				table[i] = new Bucket();
			this.size = size;						// size 초기화
		} catch (OutOfMemoryError e) {				// 테이블을 생성할 수 없음
			this.size = 0;
		}
	}

	// --- 해시값을 구함 ---//
	public int hashValue(SimpleObject2 key) {
		return Integer.parseInt(key.sno) % size;
	}

	// --- 재해시값을 구함 ---//
	public int rehashValue(int hash) {
		return (hash + 1) % size;
	}

	// --- 키값 key를 갖는 버킷 검색 ---//
	private Bucket searchNode(SimpleObject2 key, Comparator<? super SimpleObject2> c) {
		int hash = hashValue(key);														// 검색할 데이터의 해시값
		Bucket selectB = table[hash];													// 선택한 버킷
		
		for (int i = 0; selectB.stat != Status.EMPTY && i < size; i++) {				// 선택한 버킷의 상태가 비어있지 않고, 해시 테이블의 크기 만큼 반복
			if (selectB.stat == Status.OCCUPIED && c.compare(key, selectB.data) == 0) {	// 선택한 버킷의 상태가 가득차 있고, 검색할 키 값과 선택 버킷의 키 값이 같을 경우
				return selectB;															// 선택한 버킷을 반환
			}
			// 선택한 버킷의 상태가 꽉 차 있지 않고, 검색할 키 값과 버킷의 키 값이 다를 경우
			hash = rehashValue(hash);													// 재해시를 하여 새로운 해시값 구함
			selectB = table[hash];														// 해시 테이블에 재해시한 해시값을 저장하고, 선택한 버킷으로 설정
		}
		
		return null;																	// 선택한 버킷의 상태가 비어있거나, 해시 테이블의 크기를 벗어난 경우 null 반환
	}

	// --- 키값이 key인 요소를 검색(데이터를 반환)---//
	public SimpleObject2 search(SimpleObject2 key, Comparator<? super SimpleObject2> c) {
		Bucket selectB = searchNode(key, c);												// 검색할 키 값으로 반환받은 버킷을 선택 버킷으로 설정
		
		// 검색할 키값(data)이 존재하는지 확인
		if(selectB != null) {																// 선택한 버킷이 null 일 때까지 반복
			return selectB;														// 선택한 버킷의 Data 를 반환
		}
		else {
			return null;
		}
	}

	// --- 키값이 key인 데이터를 data의 요소로 추가 ---//
	public int add(SimpleObject2 key, Comparator<? super SimpleObject2> c) {

	}

	// --- 키값이 key인 요소를 삭제 ---//
	public int remove(SimpleObject2 key, Comparator<? super SimpleObject2> c) {

	}

	// --- 해시 테이블을 덤프(dump) ---//
	public void dump() {

	}
}

//*/
public class 과제_실습10_4객체오픈해시 {

	static Scanner stdIn = new Scanner(System.in);

//--- 메뉴 열거형 ---//
	enum Menu {
		ADD("추가"), REMOVE("삭제"), SEARCH("검색"), DUMP("표시"), TERMINATE("종료");

		private final String message; 							// 표시할 문자열

		static Menu MenuAt(int idx) { 							// 순서가 idx 번째인 열거를 반환
			for (Menu m : Menu.values())
				if (m.ordinal() == idx)
					return m;
			return null;
		}

		Menu(String string) { 									// 생성자(constructor)
			message = string;
		}

		String getMessage() { 									// 표시할 문자열을 반환
			return message;
		}
	}

//--- 메뉴 선택 ---//
	static Menu SelectMenu() {
		int key;
		do {
			for (Menu m : Menu.values())
				System.out.printf("(%d) %s  ", m.ordinal(), m.getMessage());
			System.out.print(" : ");
			key = stdIn.nextInt();
		} while (key < Menu.ADD.ordinal() || key > Menu.TERMINATE.ordinal());

		return Menu.MenuAt(key);
	}

	public static void main(String[] args) {
		Menu menu; 												// 메뉴

		SimpleObject2 temp; 									// 읽어 들일 데이터
		int result;
		OpenHash hash = new OpenHash(13);
		do {
			switch (menu = SelectMenu()) {
			case ADD: 											// 추가
				temp = new SimpleObject2();
				temp.scanData("추가", SimpleObject2.NO | SimpleObject2.NAME);
				int k = hash.add(temp, SimpleObject2.NO_ORDER);
				
				switch (k) {
				case 1:
					System.out.println("그 키값은 이미 등록되어 있습니다. " + temp);
					break;
				case 2:
					System.out.println("해시 테이블이 가득 찼습니다.");
					break;
				case 0:
				}
				break;

			case REMOVE: 										// 삭제
				temp = new SimpleObject2();
				temp.scanData("삭제", SimpleObject2.NO);
				result = hash.remove(temp, SimpleObject2.NO_ORDER);
				if (result == 0)
					System.out.println("삭제 처리");
				else
					System.out.println("삭제 데이터가 없음");
				break;

			case SEARCH: 										// 검색
				temp = new SimpleObject2();
				temp.scanData("검색", SimpleObject2.NO);
				SimpleObject2 t = hash.search(temp, SimpleObject2.NO_ORDER);
				if (t != null)
					System.out.println("그 키를 갖는 데이터는 " + t + " 입니다.");
				else
					System.out.println("해당 데이터가 없습니다.");
				break;

			case DUMP: 											// 표시
				hash.dump();
				break;
				
			case TERMINATE:										// 종료
				System.out.println("프로그램을 종료합니다.");
				break;
			}
		} while (menu != Menu.TERMINATE);
		
		stdIn.close();
	}
}
